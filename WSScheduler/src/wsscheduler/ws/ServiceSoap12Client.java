package wsscheduler.ws;

import com.sun.xml.ws.client.BindingProviderProperties;

import java.util.zip.CRC32;

import javax.xml.ws.BindingProvider;

import org.tempuri.services_asmx.getresponsefile.CFileContent;

import org.tempuri.services_asmx.getresponsefile.ObjectFactory;

import wsscheduler.WSSchedulerListener;

// This source file is generated by Oracle tools.
// Contents may be subject to change.
// For reporting problems, use the following:
// Generated by Oracle JDeveloper 12c 12.1.3.0.0.1008
public class ServiceSoap12Client {
    public static final String ops_checkconnection = "CHECKCONNECTION";
    public static final String ops_datainvestor = "DATAINVESTOR";
    public static final String ops_datastatic = "DATASTATIC";
    public static final String ops_validator = "VALIDATOR";

    public static void main(String[] args) {
        Service service = new Service();
        ServiceSoap serviceSoap = service.getServiceSoap12();
        // Add your code to call the desired methods.
    }
    
    public static ServiceSoap getService() {
        Service wsf = new Service();
        ServiceSoap ws = wsf.getServiceSoap12();
        BindingProvider bp = (BindingProvider) ws;
        bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, WSSchedulerListener.cfg_service_url);
        bp.getRequestContext().put(BindingProviderProperties.CONNECT_TIMEOUT, WSSchedulerListener.cfg_connect_timeout);
        bp.getRequestContext().put(BindingProviderProperties.REQUEST_TIMEOUT, WSSchedulerListener.cfg_request_timeout);
        return ws;
    }
    
    public static CFileContent makeCFileContent(String fileContent) {
        ObjectFactory f = new ObjectFactory();
        CFileContent c = f.createCFileContent();
        byte[] raw = fileContent.getBytes();
        c.setFileContents(raw);
        c.setSizeInBytes(raw.length);
        CRC32 crc = new CRC32();
        crc.update(raw);
        c.setCrc32((int)crc.getValue());
        return c;        
    }
    
    public static String invoke(ServiceSoap service, String operation, String memberCode, String fileContent) throws Exception {
        if (operation.compareToIgnoreCase(ops_checkconnection) == 0) return service.checkConnection(memberCode);
        if (operation.compareToIgnoreCase(ops_datainvestor) == 0) return String.valueOf(service.receiveDataInvestor(memberCode, makeCFileContent(fileContent)));
        if (operation.compareToIgnoreCase(ops_datastatic) == 0) return String.valueOf(service.receiveDataStatic(memberCode, makeCFileContent(fileContent)));
        if (operation.compareToIgnoreCase(ops_validator) == 0) return String.valueOf(service.validatorDataInvestor(memberCode, makeCFileContent(fileContent)));
        throw new Exception("Invalid service operation '" + operation + "'.");
    }
    
}
